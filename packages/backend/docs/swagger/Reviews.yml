/api/v1/reviews/one/{id}:
    get:
      summary: "Gives the one review. (ReviewsController::one)"
      description: "Returns a **single** instance of type `Review` **without** any _relations_. Take a look at the example for further details."
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "REVIEWS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#definitions/Review'
              example:
                id!: 716
                apartmentId!: 601
                author!: "string"
                avatar!: "string"
                repairs!: 25
                purity!: 876
                location!: 839
                priceQuality!: 69
                comment!: "string"
                isApproved!: true
                createdAt!: "2021-03-23T16:13:08.489+01:00"
                updatedAt!: "2021-03-23T16:13:08.489+01:00"
          description: "Returns a **single** instance of type `Review` **without** any _relations_. Take a look at the example for further details."
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                meta:
                  result: "NOT_AUTHORIZED"
                  error:
                    message: "ERROR"
                data: "null"
          description: "Unauthorized: Not unauthorized"
        403:
          description: "Forbidden"
        404:
          content:
            application/json:
              schema:
                type: "object"
              example:
                meta:
                  result: "ENTITY_NOT_FOUND"
                  error:
                    message: "ERROR"
                data: "null"
          description: "Not Found: Not Found"
      security:
        - bearerAuth: []
/api/v1/reviews/delete/{id}:
    delete:
      summary: " (ReviewsController::delete)"
      description: ""
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "REVIEWS"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
/api/v1/reviews/create:
    post:
      summary: " (ReviewsController::create)"
      description: ""
      parameters: []
      tags:
        - "REVIEWS"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json: {}
/api/v1/reviews/list/{page}:
    get:
      summary: "Gives the reviews page. (ReviewsController::list)"
      description: "Returns a **list** of type `Review` **without** any _relations_. Take a look at the example for further details."
      parameters:
        - in: "path"
          name: "page"
          schema:
            type: "string"
          required: true
      tags:
        - "REVIEWS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#definitions/Review'
              example:
                - id!: 716
                  apartmentId!: 601
                  author!: "string"
                  avatar!: "string"
                  repairs!: 25
                  purity!: 876
                  location!: 839
                  priceQuality!: 69
                  comment!: "string"
                  isApproved!: true
                  createdAt!: "2021-03-23T16:13:08.489+01:00"
                  updatedAt!: "2021-03-23T16:13:08.489+01:00"
          description: "Returns a **list** of type `Review` **without** any _relations_. Take a look at the example for further details."
        401:
          content:
            application/json:
              schema:
                type: "object"
              example:
                meta:
                  result: "NOT_AUTHORIZED"
                  error:
                    message: "ERROR"
                data: {}
          description: "Unauthorized: Not unauthorized"
        403:
          description: "Forbidden"
        200-0:
          content:
            application/json:
              schema:
                type: "object"
              example:
                meta:
                  result: "OK"
                  pagination:
                    perPage: 20
                    currentPage: 44444444222241
                    hasMorePages: false
                    total: 24
                data: {}
          description: "Unknown: Empty apartment page"
      security:
        - bearerAuth: []
/api/v1/reviews/update:
    post:
      summary: "Update reviews (ReviewsController::update)"
      description: ""
      parameters: []
      tags:
        - "REVIEWS"
      responses:
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json: {}
